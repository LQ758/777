/**
 * 精简版Axios - 用于替代CDN加载失败
 */
(function(global) {
    'use strict';

    function Axios(config) {
        this.defaults = config;
        this.interceptors = {
            request: { use: function() {}, eject: function() {} },
            response: { use: function() {}, eject: function() {} }
        };
    }

    Axios.prototype.request = function(config) {
        config = mergeConfig(this.defaults, config);
        
        return new Promise(function(resolve, reject) {
            var xhr = new XMLHttpRequest();
            var url = buildURL(config.url, config.params);
            
            xhr.open(config.method.toUpperCase(), url, true);
            
            // 设置请求头
            if (config.headers) {
                for (var key in config.headers) {
                    xhr.setRequestHeader(key, config.headers[key]);
                }
            }
            
            // 设置超时
            if (config.timeout) {
                xhr.timeout = config.timeout;
            }
            
            // 处理响应
            xhr.onload = function() {
                var response = {
                    data: parseResponse(xhr.responseText, xhr.getResponseHeader('content-type')),
                    status: xhr.status,
                    statusText: xhr.statusText,
                    headers: parseHeaders(xhr.getAllResponseHeaders()),
                    config: config,
                    request: xhr
                };
                
                if (xhr.status >= 200 && xhr.status < 300) {
                    resolve(response);
                } else {
                    reject(createError('Request failed with status code ' + xhr.status, config, xhr.status, xhr, response));
                }
            };
            
            xhr.onerror = function() {
                reject(createError('Network Error', config, null, xhr));
            };
            
            xhr.ontimeout = function() {
                reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', xhr));
            };
            
            // 发送请求
            var data = config.data;
            if (data && typeof data === 'object' && !(data instanceof FormData)) {
                data = JSON.stringify(data);
                xhr.setRequestHeader('Content-Type', 'application/json');
            }
            xhr.send(data || null);
        });
    };

    // 便捷方法
    ['get', 'delete', 'head', 'options'].forEach(function(method) {
        Axios.prototype[method] = function(url, config) {
            return this.request(mergeConfig(config || {}, {
                method: method,
                url: url
            }));
        };
    });

    ['post', 'put', 'patch'].forEach(function(method) {
        Axios.prototype[method] = function(url, data, config) {
            return this.request(mergeConfig(config || {}, {
                method: method,
                url: url,
                data: data
            }));
        };
    });

    // 工具函数
    function mergeConfig(config1, config2) {
        var config = {};
        config1 = config1 || {};
        config2 = config2 || {};
        
        for (var key in config1) {
            config[key] = config1[key];
        }
        for (var key in config2) {
            config[key] = config2[key];
        }
        
        return config;
    }

    function buildURL(url, params) {
        if (!params) return url;
        
        var parts = [];
        for (var key in params) {
            if (params[key] !== null && params[key] !== undefined) {
                parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
            }
        }
        
        if (parts.length > 0) {
            url += (url.indexOf('?') === -1 ? '?' : '&') + parts.join('&');
        }
        
        return url;
    }

    function parseResponse(data, contentType) {
        if (contentType && contentType.indexOf('application/json') !== -1) {
            try {
                return JSON.parse(data);
            } catch (e) {
                return data;
            }
        }
        return data;
    }

    function parseHeaders(headers) {
        var parsed = {};
        if (!headers) return parsed;
        
        headers.split('\n').forEach(function(line) {
            var i = line.indexOf(':');
            if (i > 0) {
                var key = line.substr(0, i).trim().toLowerCase();
                var val = line.substr(i + 1).trim();
                parsed[key] = val;
            }
        });
        
        return parsed;
    }

    function createError(message, config, code, request, response) {
        var error = new Error(message);
        error.config = config;
        error.code = code;
        error.request = request;
        error.response = response;
        error.isAxiosError = true;
        return error;
    }

    // 创建默认实例
    var defaults = {
        timeout: 0,
        headers: {
            common: {
                'Accept': 'application/json, text/plain, */*'
            }
        }
    };

    function createInstance(defaultConfig) {
        var context = new Axios(defaultConfig);
        var instance = Axios.prototype.request.bind(context);
        
        // 复制方法
        for (var key in Axios.prototype) {
            instance[key] = Axios.prototype[key].bind(context);
        }
        
        // 复制属性
        for (var key in context) {
            instance[key] = context[key];
        }
        
        return instance;
    }

    var axios = createInstance(defaults);
    
    axios.create = function(config) {
        return createInstance(mergeConfig(defaults, config));
    };
    
    axios.CancelToken = function() {};
    axios.isCancel = function() { return false; };
    axios.all = Promise.all.bind(Promise);
    axios.spread = function(callback) {
        return function(arr) {
            return callback.apply(null, arr);
        };
    };

    // 导出
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = axios;
    } else if (typeof define === 'function' && define.amd) {
        define(function() { return axios; });
    } else {
        global.axios = axios;
    }

})(typeof window !== 'undefined' ? window : this);
